library(reshape2)
library(ggplot2)
getData <- function(file)
{
df <- read.table(file,sep=",",header=T,stringsAsFactors = F)
df <- df[,c(1,3:12)]
return(df)
}
calculate.oh.p.percent <- function(oh.p.counts,p.mock.counts)
{
percent <- 100 * ((oh.p.counts - p.mock.counts)/oh.p.counts)
return(percent)
}
filter.negative.percent <- function(percentages)
{
filt <- percentages[which(percentages >= 0)]
return(filt)
}
get.oh.matrix <- function(oh.p.matrix,p.matrix)
{
oh.matrix <- oh.p.matrix
oh.matrix[,2:11] <- oh.p.matrix[,2:11] - p.matrix[,2:11]
oh.matrix[oh.matrix < 0] <- 0
return(oh.matrix)
}
get.percentage.oh<- function(oh.p.rep,p.mock.rep)
{
oh.p.rep[,"Total"] <- rowSums(oh.p.rep[,1:10])
p.mock.rep[,"Total"] <- rowSums(p.mock.rep[,1:10])
percent.oh.p.rep <- calculate.oh.p.percent(oh.p.rep$Total,p.mock.rep$Total)
percent.oh.p.rep <- filter.negative.percent(percent.oh.p.rep)
return(percent.oh.p.rep)
}
## Solution modified from https://stackoverflow.com/questions/18538977/combine-merge-lists-by-elements-names
cat_lists <- function(list1, list2) {
keys <- unique(c(names(list1), names(list2)))
map2(list1[keys], list2[keys], rbind) %>%
set_names(keys)
}
compare.replicates.by.position <- function(oh.rep,p.mock.rep)
{
oh.split <- oh.rep %>% separate(X,paste0("Position_",1:10),sep = 1:9)
p.mock.split <- p.mock.rep %>% separate(X,paste0("Position_",1:10),sep = 1:9)
columns <- colnames(oh.split)
p.mock.total.by.position.df <- as.data.frame(matrix(rep(0,40),nrow=4,ncol=10))
oh.total.by.position.df <- as.data.frame(matrix(rep(0,40),nrow=4,ncol=10))
colnames(p.mock.total.by.position.df) <- paste0("Position_",1:10)
colnames(oh.total.by.position.df) <- paste0("Position_",1:10)
rownames(p.mock.total.by.position.df) <- c("A","G","C","T")
rownames(oh.total.by.position.df) <- c("A","G","C","T")
for (i in 1:10)
{
position.col <- paste0("Position_",i)
read.col <- paste0("tnmP",i)
oh.counts <- as.data.frame(oh.split %>% group_by_at(.vars=position.col) %>% summarize_at(.vars=read.col,list(sum=sum)))
p.mock.counts  <- as.data.frame(p.mock.split %>% group_by_at(.vars=position.col) %>% summarize_at(.vars=read.col,list(sum=sum)))
p.mock.total.by.position.df[p.mock.counts[,1],position.col] <- p.mock.counts$sum
oh.total.by.position.df[oh.counts[,1],position.col] <- oh.counts$sum
}
return(list(P.mock=p.mock.total.by.position.df,OH=oh.total.by.position.df))
}
dir("/data2/Nickels/nanoRNA/organized_master_files_from_google_drive/KS112_to117/Empty Vector/")
dir("/data2/Nickels/nanoRNA/organized_master_files_from_google_drive/KS112_to117/Empty Vector/")
dir("/data2/Nickels/nanoRNA/organized_master_files_from_google_drive/KS112_to117/Empty Vector/", recursive = TRUE)
file.locs <- dir("/data2/Nickels/nanoRNA/organized_master_files_from_google_drive/KS112_to117/Empty Vector/", recursive = TRUE, full.names = TRUE)
file.locs
file.locs <- dir("/data2/Nickels/nanoRNA/organized_master_files_from_google_drive/KS112_to117/Empty Vector", recursive = TRUE, full.names = TRUE)
sapply(file.locs, function(x){
strsplit(x, "/")[[8]]
})
sapply(file.locs, function(x){
strsplit(x, "/")
})
sapply(file.locs, function(x){
unlsit(strsplit(x, "/"))[[8]]
})
sapply(file.locs, function(x){
unlist(strsplit(x, "/"))[[8]]
})
sapply(file.locs, function(x){
unlist(strsplit(x, "/"))[[9]]
})
names(file.locs) <- sapply(file.locs, function(x){
unlist(strsplit(x, "/"))[[9]]
})
file.locs
lapply(file.locs, getData)
lapply(file.locs[1], function(x){
read_csv(x)
})
lapply(file.locs[1], function(x){
read_csv(x) %>%
select(X1, starts_with("tnmP"))
})
library(parallel)
df.list <- mclapply(file.locs, function(x){
read_csv(x) %>%
select(X1, starts_with("tnmP"))
}, mc.cores = 12)
df.list <- lapply(file.locs, function(x){
read_csv(x) %>%
select(X1, starts_with("tnmP"))
})
names(file.locs)
file.locs[grepl("all", names(file.locs)) | grepl("PPP", names(file.locs))]
files.i.want <- file.locs[grepl("all", names(file.locs)) | grepl("PPP", names(file.locs))]
# read the files in
df.list <- lapply(files.i.want, function(x){
read_csv(x) %>%
select(X1, starts_with("tnmP"))
})
df.list
bind_rows(df.list, .id = "sample")
bind_rows(df.list, .id = "sample") %>%
separate(sample, into = c("something", "condition", "rep"), sep = "_")
# get file locations
file.locs <- dir("/data2/Nickels/nanoRNA/organized_master_files_from_google_drive/KS112_to117/Empty Vector", recursive = TRUE, full.names = TRUE)
# name the samples something sensible
names(file.locs) <- sapply(file.locs, function(x){
unlist(strsplit(x, "/"))[[9]] %>%
str_remove(".csv")
})
files.i.want <- file.locs[grepl("all", names(file.locs)) | grepl("PPP", names(file.locs))]
# read the files in
df.list <- lapply(files.i.want, function(x){
read_csv(x) %>%
select(X1, starts_with("tnmP")) %>%
dplyr::rename("sequence" = "X1")
})
(df <- bind_rows(df.list, .id = "sample") %>%
separate(sample, into = c("something", "condition", "rep"), sep = "_", remove = FALSE))
# get file locations
file.locs <- dir("/data2/Nickels/nanoRNA/organized_master_files_from_google_drive/KS112_to117/Empty Vector", recursive = TRUE, full.names = TRUE)
# name the samples something sensible
names(file.locs) <- sapply(file.locs, function(x){
unlist(strsplit(x, "/"))[[9]] %>%
str_remove(".csv")
})
files.i.want <- file.locs[grepl("all", names(file.locs)) | grepl("PPP", names(file.locs))]
# read the files in
df.list <- lapply(files.i.want[2], function(x){
read_csv(x) %>%
select(X1, starts_with("tnmP")) %>%
dplyr::rename("sequence" = "X1")
})
(df <- bind_rows(df.list, .id = "sample") %>%
separate(sample, into = c("something", "condition", "rep"), sep = "_", remove = FALSE))
# get file locations
file.locs <- dir("/data2/Nickels/nanoRNA/organized_master_files_from_google_drive/KS112_to117/Empty Vector", recursive = TRUE, full.names = TRUE)
# name the samples something sensible
names(file.locs) <- sapply(file.locs, function(x){
unlist(strsplit(x, "/"))[[9]] %>%
str_remove(".csv")
})
files.i.want <- file.locs[grepl("all", names(file.locs)) | grepl("PPP", names(file.locs))]
# read the files in
df.list <- lapply(files.i.want[1:2], function(x){
read_csv(x) %>%
select(X1, starts_with("tnmP")) %>%
dplyr::rename("sequence" = "X1")
})
(df <- bind_rows(df.list, .id = "sample") %>%
separate(sample, into = c("something", "condition", "rep"), sep = "_", remove = FALSE))
df %>%
pivot_longer(cols = where(starts_with("tnmP")), names_to = "position", values_to = "reads")
df %>%
pivot_longer(cols = starts_with("tnmP"))
df %>%
pivot_longer(cols = starts_with("tnmP"), names_to = "position", values_to = "reads")
df %>%
pivot_longer(cols = starts_with("tnmP"), names_to = "position", values_to = "reads")
df %>%
pivot_longer(cols = starts_with("tnmP"), names_to = "position", values_to = "reads") %>%
group_by(sample, sequence, position) %>%
summarise(total_reads = sum(reads))
df2 <- df %>%
pivot_longer(cols = starts_with("tnmP"), names_to = "position", values_to = "reads") %>%
group_by(sample, sequence, position) %>%
summarise(total_reads = sum(reads))
df2
1+1
df3 <- df2[1:100000,]
df3 %>%
separate(sequence, into = paste("pos", 1:10, sep = ""))
df3 %>%
separate(sequence, into = letters)
df3 %>%
separate(sample)
df3 %>%
separate(sample, into = letters[1:3])
df3 %>%
separate(sample, into = letters[1:10], sep = [^[:alnum:]]+)
df3 %>%
separate(sample, into = letters[1:10], sep = [^[:alnum:]]+])
df3 %>%
separate(sample, into = letters[1:10], sep = "[^[:alnum:]]+]")
df3 %>%
separate(sample, into = letters[1:10], sep = "[ATCG]")
df3
df3 %>%
extract(sequence, into = paste("p", 1:10, sep = ""), regex = "[ATCG]{1}")
str_extract("ATCGATGCTGCATGA", pattern = "[ATCG]{1}")
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e"))
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e"))
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")) %>%
extract(x, "A")
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e"))
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")) %>%
extract(x, "A", remove = FALSE)
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")) %>%
extract(x, "[A-Z]", remove = FALSE)
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")) %>%
extract(x, "A", remove = FALSE)
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")) %>%
extract(., "A", remove = FALSE)
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")) %>%
extract(., x, "A", remove = FALSE)
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")) %>%
extract(., x, into = "test", remove = FALSE)
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")) %>%
extract(., x, into = "test", regex = "-", remove = FALSE)
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")) %>%
extract(., x, into = "test", regex = "A", remove = FALSE)
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")) %>%
extract(., x, into = "test", regex = "a", remove = FALSE)
df3 %>%
extract(sequence, into = paste("p", 1:10, sep = ""))
rep("([ATCG]{1})", 10)
df3 %>%
extract(sequence, into = paste("p", 1:10, sep = ""), regex = rep("([ATCG]{1})", 10), remove = FALSE)
rep("([ATCG]{1})", 10)
rep("([ATCG]{1})", 10) %>%
paste(sep = "-")
rep("([ATCG]{1})", 10) %>%
paste(collapse = "-")
paste(rep("([ATCG]{1})", 10), collapse = "")
v <- paste(rep("([ATCG]{1})", 10), collapse = "")
df3 %>%
extract(sequence, into = paste("p", 1:10, sep = ""), regex = v, remove = FALSE)
regex.to.split.with <- paste(rep("([ATCG]{1})", 10), collapse = "")
df3 %>%
extract(sequence, into = paste("p", 1:10, sep = ""), regex = regex.to.split.with, remove = FALSE)
names(df)
names(df)[6:15]
dftest <- df[1:10000,]
dftest <- df[1:1000,]
dftest <- df[1:10,]
dftest %>%
split(.$sequence)
dftest %>%
split(.$sequence) %>%
pivot_longer()
dftest %>%
split(.$sequence)
str_split("ACTTCGATGT")
str_split("ACTTCGATGT", pattern = "[A-Z]{1}")
str_split("ACTTCGATGT", pattern = "")
1+1
dftest %>%
split(.$sequence)
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- str_split(x$sequence)
return(newnames)
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- str_split(x$sequence, pattern = "")
return(newnames)
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
return(newnames)
})
dftest %>%
split(.$sequence)
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- newnames
return(x)
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste("p", 1:10, newnames, sep = "_")
return(x)
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste("p", 1:10, newnames, sep = "_")
x %>%
pivot_longer(cols = starts_with("p_"))
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste("p", 1:10, newnames, sep = "_")
x %>%
pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads") %>%
separate(test, into = c("position", "nucleotide"))
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste("p", 1:10, newnames, sep = "_")
x %>%
pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads") %>%
separate(test, into = c("position", "nucleotide"),sep = "_")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste("p", 1:10, newnames, sep = "_")
# x %>%
#   pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads") %>%
#   separate(test, into = c("position", "nucleotide"), sep = "_")
return(x)
})
dftest <- df[1:10,]
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "b_b", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads") %>%
separate(test, into = c("position", "nucleotide"), sep = "b_b")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "b_b", newnames)
# x %>%
#   pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads") %>%
#   separate(test, into = c("position", "nucleotide"), sep = "b_b")
return(x)
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads") %>%
separate(test, into = c("position", "nucleotide"), sep = "-")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads") %>%
separate(test, into = c("position", "nucleotide"), sep = "-")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads")
# separate(test, into = c("position", "nucleotide"), sep = "-")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads")
# separate(test, into = c("position", "nucleotide"), sep = "-")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x
# pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads")
# separate(test, into = c("position", "nucleotide"), sep = "-")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names = "test", values_to = "reads")
# separate(test, into = c("position", "nucleotide"), sep = "-")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"))
# separate(test, into = c("position", "nucleotide"), sep = "-")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names_to = "test")
# separate(test, into = c("position", "nucleotide"), sep = "-")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names_to = "test", values_to = "reads")
# separate(test, into = c("position", "nucleotide"), sep = "-")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names_to = "test", values_to = "reads") %>%
separate(test, into = c("position", "nucleotide"), sep = "-")
})
dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names_to = "test", values_to = "reads") %>%
separate(test, into = c("position", "nucleotide"), sep = "-")
}) %>%
bind_rows()
dftest <- df[1:10,]
df2 <- dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names_to = "test", values_to = "reads") %>%
separate(test, into = c("position", "nucleotide"), sep = "-")
}) %>%
bind_rows()
df2
dftest <- df[1:10,]
df2 <- dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names_to = "test", values_to = "reads") %>%
separate(test, into = c("position", "nucleotide"), sep = "-")
}) %>%
bind_rows()
df2
df2 %>%
group_by(condition, rep, position, nucleotide) %>%
summrise(total_reads = sum(reads))
df2 %>%
group_by(condition, rep, position, nucleotide) %>%
summarise(total_reads = sum(reads))
paste0("p_", 1:10)
df2 <- factor(df2$position, levels = paste0("p_", 1:10))
df2 %>%
group_by(condition, rep, position, nucleotide) %>%
summarise(total_reads = sum(reads))
df2
dftest <- df[1:10,]
df2 <- dftest %>%
split(.$sequence) %>%
map(function(x){
newnames <- unlist(str_split(x$sequence, pattern = ""))
names(x)[6:ncol(x)] <- paste0("p_", 1:10, "-", newnames)
x %>%
pivot_longer(cols = starts_with("p_"), names_to = "test", values_to = "reads") %>%
separate(test, into = c("position", "nucleotide"), sep = "-")
}) %>%
bind_rows()
df2
df2$position <- factor(df2$position, levels = paste0("p_", 1:10))
df2 %>%
group_by(condition, rep, position, nucleotide) %>%
summarise(total_reads = sum(reads))
devtools::install_github("john-s-f/polysome.profileR")
library(polysome.profileR)
read_polysomes("~/polysomes/john/jeremyyeast/exponential/ex1.csv")
x <- read_polysomes("~/polysomes/john/jeremyyeast/exponential/ex1.csv")
graph_simple_polysomes(x)
graph_simple_polysomes(x, 10)
devtools::document()
devtools::install_github("john-s-f/polysome.profileR")
devtools::install_github("john-s-f/polysome.profileR", force = TRUE)
x <- read_polysomes("~/polysomes/john/jeremyyeast/exponential/ex1.csv")
